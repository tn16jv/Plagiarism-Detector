// <auto-generated />
using System;
using Floss.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Floss.Database.Migrations
{
    [DbContext(typeof(FlossContext))]
    partial class FlossContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Floss.Database.Models.Assignment", b =>
                {
                    b.Property<long>("AssId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignmentName")
                        .HasMaxLength(100);

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("DueDate");

                    b.Property<DateTime>("LateDueDate");

                    b.HasKey("AssId");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignment");

                    b.HasData(
                        new { AssId = 1L, AssignmentName = "First Assignment", CourseId = 1L, DueDate = new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), LateDueDate = new DateTime(2019, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { AssId = 2L, AssignmentName = "Second Assignment", CourseId = 1L, DueDate = new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), LateDueDate = new DateTime(2019, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Floss.Database.Models.AssignmentExempt", b =>
                {
                    b.Property<long>("AssId");

                    b.Property<string>("FilePath")
                        .HasMaxLength(200);

                    b.Property<string>("FileType")
                        .HasMaxLength(10);

                    b.Property<string>("StrippedFilePath")
                        .HasMaxLength(200);

                    b.HasKey("AssId");

                    b.ToTable("AssignmentExempt");
                });

            modelBuilder.Entity("Floss.Database.Models.AssignmentSubmission", b =>
                {
                    b.Property<long>("AssId");

                    b.Property<long>("UserId");

                    b.Property<string>("EvalFilePath")
                        .HasMaxLength(200);

                    b.Property<string>("FilePath")
                        .HasMaxLength(200);

                    b.Property<string>("FileType")
                        .HasMaxLength(10);

                    b.Property<string>("StrippedFilePath")
                        .HasMaxLength(200);

                    b.Property<DateTime>("SubmittedDate");

                    b.HasKey("AssId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignmentSubmission");

                    b.HasData(
                        new { AssId = 1L, UserId = 1L, FilePath = "MyMentalState1/reee.cpp", FileType = "cpp", StrippedFilePath = "MyMentalState1/reee.txt", SubmittedDate = new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { AssId = 1L, UserId = 4L, FilePath = "MyMentalState/reee.java", FileType = "java", StrippedFilePath = "MyMentalState2/reee.txt", SubmittedDate = new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { AssId = 2L, UserId = 1L, FilePath = "MyMentalState/reee.c", FileType = "c", StrippedFilePath = "MyMentalState3/reee.txt", SubmittedDate = new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Floss.Database.Models.AuthorizationRoleType", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AuthorizationRoleType");

                    b.HasData(
                        new { Id = 1L, RoleName = "Operations" },
                        new { Id = 2L, RoleName = "System Admin" },
                        new { Id = 3L, RoleName = "Developer" },
                        new { Id = 4L, RoleName = "Group Coordinator" }
                    );
                });

            modelBuilder.Entity("Floss.Database.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseCode")
                        .HasMaxLength(4);

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(4);

                    b.Property<string>("Duration")
                        .HasMaxLength(2);

                    b.Property<long>("ProfId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new { Id = 1L, CourseCode = "4F00", DepartmentName = "COSC", Duration = "D3", ProfId = 1L, Year = 2018 },
                        new { Id = 2L, CourseCode = "4P80", DepartmentName = "COSC", Duration = "D4", ProfId = 1L, Year = 2018 },
                        new { Id = 3L, CourseCode = "1p06", DepartmentName = "MATH", Duration = "D2", ProfId = 1L, Year = 2018 }
                    );
                });

            modelBuilder.Entity("Floss.Database.Models.Enrollment", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("CourseId");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("date");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollment");

                    b.HasData(
                        new { UserId = 1L, CourseId = 1L, Until = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = 1L, CourseId = 2L, Until = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = 1L, CourseId = 3L, Until = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = 4L, CourseId = 1L, Until = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = 4L, CourseId = 2L, Until = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = 4L, CourseId = 3L, Until = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Floss.Database.Models.Supervision", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("CourseId");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Supervision");
                });

            modelBuilder.Entity("Floss.Database.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasMaxLength(50);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100);

                    b.Property<string>("Domain")
                        .HasMaxLength(10);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .HasMaxLength(100);

                    b.Property<string>("StudentNumber")
                        .HasMaxLength(7);

                    b.Property<long?>("UserRoleId");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = 1L, AccountName = "jp14fg", DisplayName = "Jordan Prada", Domain = "brocku.ca", Email = "jp14fg@brocku.ca", FullName = "Jordan Prada" },
                        new { Id = 2L, AccountName = "dd14wm", DisplayName = "Dana Darmohray", Domain = "brocku.ca", Email = "dd14wm@brocku.ca", FullName = "Dana Darmohray" },
                        new { Id = 3L, AccountName = "tn16jv", DisplayName = "ThaiBinh Nguyen", Domain = "brocku.ca", Email = "tn16jv@brocku.ca", FullName = "ThaiBinh Nguyen" },
                        new { Id = 4L, AccountName = "dp14hx", DisplayName = "Dylan Pavao", Domain = "brocku.ca", Email = "dp14hx@brocku.ca", FullName = "Dylan Pavao" },
                        new { Id = 5L, AccountName = "tk14rs", DisplayName = "Tyler Kisac", Domain = "brocku.ca", Email = "tk14rs@brocku.ca", FullName = "Tyler Kisac" },
                        new { Id = 6L, AccountName = "ma15om", DisplayName = "Michael Ahle", Domain = "brocku.ca", Email = "ma15om@brocku.ca", FullName = "Michael Ahle" }
                    );
                });

            modelBuilder.Entity("Floss.Database.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuthorizationRoleTypeId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationRoleTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new { Id = 1L, AuthorizationRoleTypeId = 1L, UserId = 1L },
                        new { Id = 2L, AuthorizationRoleTypeId = 1L, UserId = 2L },
                        new { Id = 3L, AuthorizationRoleTypeId = 1L, UserId = 3L },
                        new { Id = 4L, AuthorizationRoleTypeId = 1L, UserId = 4L },
                        new { Id = 5L, AuthorizationRoleTypeId = 1L, UserId = 5L },
                        new { Id = 6L, AuthorizationRoleTypeId = 1L, UserId = 6L }
                    );
                });

            modelBuilder.Entity("Floss.Database.Models.Assignment", b =>
                {
                    b.HasOne("Floss.Database.Models.Course", "Course")
                        .WithMany("Assignment")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Assignments_Courses");
                });

            modelBuilder.Entity("Floss.Database.Models.AssignmentExempt", b =>
                {
                    b.HasOne("Floss.Database.Models.Assignment", "Assignment")
                        .WithMany("AssignmentExempts")
                        .HasForeignKey("AssId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floss.Database.Models.AssignmentSubmission", b =>
                {
                    b.HasOne("Floss.Database.Models.Assignment", "Assignment")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("AssId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Floss.Database.Models.User", "User")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Floss.Database.Models.Enrollment", b =>
                {
                    b.HasOne("Floss.Database.Models.Course", "Course")
                        .WithMany("Enrollment")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Enrollments_Courses");

                    b.HasOne("Floss.Database.Models.User", "User")
                        .WithMany("Enrollment")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Enrollments_User");
                });

            modelBuilder.Entity("Floss.Database.Models.Supervision", b =>
                {
                    b.HasOne("Floss.Database.Models.Course", "Course")
                        .WithMany("Supervision")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Supervisions_Courses");

                    b.HasOne("Floss.Database.Models.User", "User")
                        .WithMany("Supervision")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Supervisions_User");
                });

            modelBuilder.Entity("Floss.Database.Models.User", b =>
                {
                    b.HasOne("Floss.Database.Models.UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId");
                });

            modelBuilder.Entity("Floss.Database.Models.UserRole", b =>
                {
                    b.HasOne("Floss.Database.Models.AuthorizationRoleType", "AuthorizationRoleType")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("AuthorizationRoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Floss.Database.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
